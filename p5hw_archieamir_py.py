# -*- coding: utf-8 -*-
"""P5HW_ArchieAmir.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MDnGoOu4r6yj5IsUPVQSPBgKSBQaCW6H
"""

#Amir Archie
#3/7/25
#P5HW
#Create the game logic

import random
import time


class Ability:
    def __init__(self, name, type_name, energy_cost, base_damage, effect=None):
        self.name = name
        self.type_name = type_name
        self.energy_cost = energy_cost
        self.base_damage = base_damage
        self.effect = effect

    def execute(self, user, target):
        if user.energy < self.energy_cost:
            print(f"{user.name} doesn't have enough energy to use {self.name}.\n")
            return False

        user.energy -= self.energy_cost
        damage = max(self.base_damage + user.strength - target.defense, 0)
        target.take_damage(damage)
        print(f"💥 {user.name} uses a {self.type_name} attack: {self.name}! Deals {damage} damage to {target.name}!")

        if self.effect:
            self.effect(user, target)
        return True

class Fighter:
    def __init__(self, name, style, health, energy, strength, defense, speed, ability):
        self.name = name
        self.style = style
        self.health = health
        self.energy = energy
        self.strength = strength
        self.defense = defense
        self.speed = speed
        self.ability = ability
        self.stunned = False

    def is_alive(self):
        return self.health > 0

    def take_damage(self, dmg):
        self.health -= dmg
        if self.health < 0:
            self.health = 0

    def show_stats(self):
        print(f"📊 {self.name} | Style: {self.style} | HP: {self.health} | EN: {self.energy} | STR: {self.strength} | DEF: {self.defense} | SPD: {self.speed}")

    def take_turn(self, opponent):
        if self.stunned:
            print(f"😵 {self.name} is stunned and skips the turn!")
            self.stunned = False
            return
        self.ability.execute(self, opponent)


def create_player():
    name = input("Enter your fighter’s name: ")
    print("Choose your Fighting style:")
    print("1. Undead technique")
    print("2. Ki Controller ")
    print("3. Martial Arts")

    choice = input("Select 1, 2 or 3: ")

    if choice == "1":
        style = "Mind Warped"
        ability = Ability("Mind Warped", "Undead", energy_cost=11, base_damage=12)
    elif choice == "2":
        style = "Ki Controller"
        ability = Ability("Ki Burst", "Ki", energy_cost=9, base_damage=10)
    elif choice == "3":
        style = "Martial art"
        ability = Ability("1000 hands of Buddah", "Martial arts", energy_cost=7, base_damage=15, )
    else:
        print("Invalid input. Defaulting to Ki Controller.")
        style = "Ki Controller"
        ability = Ability("Ki Burst", "Ki", energy_cost=9, base_damage=15)

    return Fighter(
        name=name,
        style=style,
        health=100,
        energy=150,
        strength=random.randint(12, 18),
        defense=random.randint(5, 10),
        speed=random.randint(5, 10),
        ability=ability
    )

def generate_enemy(enemy_number):
    names = ["Zhou Yiran", "Feng Baobao", "Wang Ye"]
    chosen_name = random.choice(names) + f" #{enemy_number}"

    enemy_types = [
        ("Dead Silence", "Undead", 7, 15, ),
        ("Shadow Pull", "Ki", 8, 10, ),
        ("Sting Rays", "Martial art", 5, 12, )
    ]

    ability_info = random.choice(enemy_types)
    ability = Ability(*ability_info)

    return Fighter(
        name=chosen_name,
        style=ability.type_name,
        health=random.randint(70, 100),
        energy=random.randint(30, 50),
        strength=random.randint(10, 18),
        defense=random.randint(5, 10),
        speed=random.randint(3, 7),
        ability=ability
    )

def battle(player, enemy):
    turn = 0
    print(f"\n⚔️ {player.name} VS {enemy.name} - Let the fight begin! ⚔️")

    while player.is_alive() and enemy.is_alive():
        attacker = player if turn % 2 == 0 else enemy
        defender = enemy if attacker == player else player

        print(f"\n--- {attacker.name}'s Turn ---")
        attacker.take_turn(defender)


        print("\n📈 Updated Stats:")
        player.show_stats()
        enemy.show_stats()

        if not defender.is_alive():
            print(f"\n💀 {defender.name} has fallen!")
            break

        turn += 1
        time.sleep(1)


def survival_mode():
    print("🌌 Hitori no Shita: Outcast Survival Mode 🌌")
    player = create_player()
    max_enemies = 3
    enemy_count = 0

    while player.is_alive() and enemy_count < max_enemies:
        enemy_count += 1
        enemy = generate_enemy(enemy_count)
        battle(player, enemy)

        if player.is_alive():
            print(f"\n✨ Victory! Preparing next enemy ({enemy_count}/{max_enemies})...")
            player.energy = min(player.energy + 10, 50)
            time.sleep(2)
        else:
            print("\n☠️ You were defeated in battle.")
            break

    print(f"\n🏆 Game Over. You defeated {enemy_count if player.is_alive() else enemy_count - 1} enemies!")


if __name__ == "__main__":
    survival_mode()